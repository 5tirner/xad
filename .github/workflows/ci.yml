name: CI
on: [push, pull_request]
jobs:
  build_and_test_windows:
    strategy:
      fail-fast: false
      matrix:
        toolset: ["14.0", "14.1", "14.2", "14.3"]
        compiler: [msvc, clang]
        config: [Release, Debug]
        include:
          - compiler: clang
            cxx: clang-cl
            cc: clang-cl
            os: windows-2022
            vsvarsall: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
          - compiler: msvc
            cxx: cl
            cc: cl
            os: windows-2022
            vsvarsall: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
          - toolset: "14.0"
            compiler: msvc
            os: windows-2019
            vsvarsall: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat
        exclude:
          - compiler: clang
            toolset: "14.1"
          - compiler: clang
            toolset: "14.2"
          - compiler: clang
            toolset: "14.0"
    runs-on: ${{ matrix.os }}
    steps:
      - name: setup
        run: |
          choco install -y ninja
      - uses: actions/checkout@v3
      - name: configure
        shell: cmd
        run: |
          mkdir build
          cd build
          call "${{ matrix.vsvarsall }}" amd64 -vcvars_ver=${{ matrix.toolset }}
          cmake .. -GNinja ^
             -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}/install" ^
             -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} ^
             -DCMAKE_C_COMPILER=${{ matrix.cc }} ^
             -DCMAKE_BUILD_TYPE=${{ matrix.config }} 
      - name: build
        shell: cmd
        run: |
          cd build
          call "${{ matrix.vsvarsall }}" amd64 -vcvars_ver=${{ matrix.toolset }}
          cmake --build .
      - name: test
        shell: cmd
        run: |
          cd build
          call "${{ matrix.vsvarsall }}" amd64 -vcvars_ver=${{ matrix.toolset }}
          ctest --no-compress-output --output-on-failure -j3 --output-junit test_results.xml
      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results (windows ${{ matrix.compiler }}-${{ matrix.toolset }}-${{ matrix.config }})
          path: build/test_results.xml
      - name: install
        shell: cmd
        run: |
          cd build
          call "${{ matrix.vsvarsall }}" amd64 -vcvars_ver=${{ matrix.toolset }}
          cmake --install .
      - name: install test
        shell: cmd
        run: |
          mkdir installtest
          cd installtest
          call "${{ matrix.vsvarsall }}" amd64 -vcvars_ver=${{ matrix.toolset }}
          cmake ..\\samples -GNinja ^
             -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} ^
             -DCMAKE_C_COMPILER=${{ matrix.cc }} ^
             -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
             -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"
          cmake --build .
  
  build_and_test_linux:
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc-4.8, gcc-7, gcc-11, clang]
        config: [Release, Debug]
        reuse_slots: [OFF, ON]
        include:
          - compiler: clang
            cxx: clang++
            cc: clang
            os: ubuntu-latest
            install: false
          - compiler: gcc-4.8
            cxx: g++-4.8
            cc: gcc-4.8
            os: ubuntu-18.04
            install: true
          - compiler: gcc-7
            cxx: g++
            cc: gcc
            os: ubuntu-18.04
            install: false
          - compiler: gcc-11
            cxx: g++
            cc: gcc
            os: ubuntu-20.04
            install: false
        exclude:
          - config: Debug
            reuse_slots: ON
    runs-on: ${{ matrix.os }}
    steps:
      - name: setup
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache ninja-build gpg wget
      - name: compiler setup
        if: ${{ matrix.install }}
        run: |
          sudo apt-get install -y ${{ matrix.cxx }} ${{ matrix.cc }}
      - name: cmake setup
        if: ${{ matrix.os == 'ubuntu-18.04' }}
        run: |
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          sudo apt-get update
          sudo apt-get install -y cmake
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: linux-${{ matrix.compiler }}-${{ matrix.config }}
      - uses: actions/checkout@v3
      - name: configure
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DCMAKE_C_COMPILER=${{ matrix.cc }} \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
      - name: build
        run: |
          cd build
          cmake --build .
      - name: test
        run: |
          cd build
          ctest --no-compress-output --output-on-failure -j3 --output-junit test_results.xml
      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results (linux ${{ matrix.compiler }}-${{ matrix.config }}-${{ matrix.reuse_slots }})
          path: build/test_results.xml
      - name: install
        run: |
          cd build
          cmake --install .
      - name: install test
        run: |
          mkdir installtest
          cd installtest
          cmake ../samples -GNinja \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"  \
            -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
            -DCMAKE_C_COMPILER=${{ matrix.cc }} 
          cmake --build .

  build_and_test_macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        config: [Release, Debug]
    steps:
      - name: setup
        run: |
          brew install ninja
          brew install ccache
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: macos-${{ matrix.config }}
      - uses: actions/checkout@v3
      - name: configure
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install
      - name: build
        run: |
          cd build
          cmake --build .
      - name: test
        run: |
          cd build
          ctest --no-compress-output --output-on-failure -j3 --output-junit test_results.xml
      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results (macos ${{ matrix.config }})
          path: build/test_results.xml
      - name: install
        run: |
          cd build
          cmake --install .
      - name: install test
        run: |
          mkdir installtest
          cd installtest
          cmake ../samples -GNinja \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}/install"
          cmake --build .

  coverage:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        reuse_slots: [OFF, ON]
    steps:
      - name: setup
        run: |
          sudo apt update
          sudo apt install -y ccache ninja-build lcov
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: coverage-${{ matrix.reuse_slots }}
      - uses: actions/checkout@v3
      - name: configure
        run: |
          mkdir build
          cd build
          cmake .. -GNinja \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_C_COMPILER=gcc \
            -DCMAKE_CXX_FLAGS="-O0 -g -fprofile-arcs -ftest-coverage" \
            -DCMAKE_EXE_LINKER_FLAGS="-lgcov"
      - name: build
        run: |
          cd build
          cmake --build .
      - name: Capture baseline
        run: |
          cd build
          mkdir coverage tmp
          lcov --no-external --capture --initial --directory ${{ github.workspace }} --output-file ./tmp/lcov_base.info
      - name: Run tests
        run: |
          cd build
          ctest --no-compress-output --output-on-failure -j3
      - name: Capture coverage
        run: |
          cd build
          lcov --no-external --capture --directory ${{ github.workspace }} --output-file ./tmp/lcov_run.info
          lcov --add-tracefile ./tmp/lcov_base.info --add-tracefile ./tmp/lcov_run.info --output-file ./tmp/lcov_total.info
          lcov --remove ./tmp/lcov_total.info "$PWD/*" "${{ github.workspace }}/test/*" "${{ github.workspace }}/samples/*" --output-file ./coverage/lcov.info
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: reuseslots-${{ matrix.reuse_slots }}
          path-to-lcov: build/coverage/lcov.info
          parallel: true
  
  coverage_finish:
    needs: coverage
    runs-on: ubuntu-latest
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
          
  event_file:
    name: Event File
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

